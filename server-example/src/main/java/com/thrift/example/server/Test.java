/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.thrift.example.server;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2018-05-22")
public class Test implements org.apache.thrift.TBase<Test, Test._Fields>, java.io.Serializable, Cloneable, Comparable<Test> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Test");

  private static final org.apache.thrift.protocol.TField BOOL__FIELD_DESC = new org.apache.thrift.protocol.TField("bool_", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField BYTE__FIELD_DESC = new org.apache.thrift.protocol.TField("byte_", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField I16__FIELD_DESC = new org.apache.thrift.protocol.TField("i16_", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField I32__FIELD_DESC = new org.apache.thrift.protocol.TField("i32_", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField I64__FIELD_DESC = new org.apache.thrift.protocol.TField("i64_", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField DOUBLE__FIELD_DESC = new org.apache.thrift.protocol.TField("double_", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField STRING__FIELD_DESC = new org.apache.thrift.protocol.TField("string_", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField BINARY__FIELD_DESC = new org.apache.thrift.protocol.TField("binary_", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TestTupleSchemeFactory());
  }

  public boolean bool_; // required
  public byte byte_; // optional
  public short i16_; // required
  public int i32_; // required
  public long i64_; // required
  public double double_; // required
  public String string_; // required
  public ByteBuffer binary_; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BOOL_((short)1, "bool_"),
    BYTE_((short)2, "byte_"),
    I16_((short)3, "i16_"),
    I32_((short)4, "i32_"),
    I64_((short)5, "i64_"),
    DOUBLE_((short)6, "double_"),
    STRING_((short)7, "string_"),
    BINARY_((short)8, "binary_");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BOOL_
          return BOOL_;
        case 2: // BYTE_
          return BYTE_;
        case 3: // I16_
          return I16_;
        case 4: // I32_
          return I32_;
        case 5: // I64_
          return I64_;
        case 6: // DOUBLE_
          return DOUBLE_;
        case 7: // STRING_
          return STRING_;
        case 8: // BINARY_
          return BINARY_;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BOOL__ISSET_ID = 0;
  private static final int __BYTE__ISSET_ID = 1;
  private static final int __I16__ISSET_ID = 2;
  private static final int __I32__ISSET_ID = 3;
  private static final int __I64__ISSET_ID = 4;
  private static final int __DOUBLE__ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.BYTE_};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BOOL_, new org.apache.thrift.meta_data.FieldMetaData("bool_", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BYTE_, new org.apache.thrift.meta_data.FieldMetaData("byte_", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.I16_, new org.apache.thrift.meta_data.FieldMetaData("i16_", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.I32_, new org.apache.thrift.meta_data.FieldMetaData("i32_", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.I64_, new org.apache.thrift.meta_data.FieldMetaData("i64_", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DOUBLE_, new org.apache.thrift.meta_data.FieldMetaData("double_", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STRING_, new org.apache.thrift.meta_data.FieldMetaData("string_", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BINARY_, new org.apache.thrift.meta_data.FieldMetaData("binary_", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Test.class, metaDataMap);
  }

  public Test() {
  }

  public Test(
    boolean bool_,
    short i16_,
    int i32_,
    long i64_,
    double double_,
    String string_,
    ByteBuffer binary_)
  {
    this();
    this.bool_ = bool_;
    setBool_IsSet(true);
    this.i16_ = i16_;
    setI16_IsSet(true);
    this.i32_ = i32_;
    setI32_IsSet(true);
    this.i64_ = i64_;
    setI64_IsSet(true);
    this.double_ = double_;
    setDouble_IsSet(true);
    this.string_ = string_;
    this.binary_ = org.apache.thrift.TBaseHelper.copyBinary(binary_);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Test(Test other) {
    __isset_bitfield = other.__isset_bitfield;
    this.bool_ = other.bool_;
    this.byte_ = other.byte_;
    this.i16_ = other.i16_;
    this.i32_ = other.i32_;
    this.i64_ = other.i64_;
    this.double_ = other.double_;
    if (other.isSetString_()) {
      this.string_ = other.string_;
    }
    if (other.isSetBinary_()) {
      this.binary_ = org.apache.thrift.TBaseHelper.copyBinary(other.binary_);
    }
  }

  public Test deepCopy() {
    return new Test(this);
  }

  @Override
  public void clear() {
    setBool_IsSet(false);
    this.bool_ = false;
    setByte_IsSet(false);
    this.byte_ = 0;
    setI16_IsSet(false);
    this.i16_ = 0;
    setI32_IsSet(false);
    this.i32_ = 0;
    setI64_IsSet(false);
    this.i64_ = 0;
    setDouble_IsSet(false);
    this.double_ = 0.0;
    this.string_ = null;
    this.binary_ = null;
  }

  public boolean isBool_() {
    return this.bool_;
  }

  public Test setBool_(boolean bool_) {
    this.bool_ = bool_;
    setBool_IsSet(true);
    return this;
  }

  public void unsetBool_() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BOOL__ISSET_ID);
  }

  /** Returns true if field bool_ is set (has been assigned a value) and false otherwise */
  public boolean isSetBool_() {
    return EncodingUtils.testBit(__isset_bitfield, __BOOL__ISSET_ID);
  }

  public void setBool_IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BOOL__ISSET_ID, value);
  }

  public byte getByte_() {
    return this.byte_;
  }

  public Test setByte_(byte byte_) {
    this.byte_ = byte_;
    setByte_IsSet(true);
    return this;
  }

  public void unsetByte_() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BYTE__ISSET_ID);
  }

  /** Returns true if field byte_ is set (has been assigned a value) and false otherwise */
  public boolean isSetByte_() {
    return EncodingUtils.testBit(__isset_bitfield, __BYTE__ISSET_ID);
  }

  public void setByte_IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BYTE__ISSET_ID, value);
  }

  public short getI16_() {
    return this.i16_;
  }

  public Test setI16_(short i16_) {
    this.i16_ = i16_;
    setI16_IsSet(true);
    return this;
  }

  public void unsetI16_() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __I16__ISSET_ID);
  }

  /** Returns true if field i16_ is set (has been assigned a value) and false otherwise */
  public boolean isSetI16_() {
    return EncodingUtils.testBit(__isset_bitfield, __I16__ISSET_ID);
  }

  public void setI16_IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __I16__ISSET_ID, value);
  }

  public int getI32_() {
    return this.i32_;
  }

  public Test setI32_(int i32_) {
    this.i32_ = i32_;
    setI32_IsSet(true);
    return this;
  }

  public void unsetI32_() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __I32__ISSET_ID);
  }

  /** Returns true if field i32_ is set (has been assigned a value) and false otherwise */
  public boolean isSetI32_() {
    return EncodingUtils.testBit(__isset_bitfield, __I32__ISSET_ID);
  }

  public void setI32_IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __I32__ISSET_ID, value);
  }

  public long getI64_() {
    return this.i64_;
  }

  public Test setI64_(long i64_) {
    this.i64_ = i64_;
    setI64_IsSet(true);
    return this;
  }

  public void unsetI64_() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __I64__ISSET_ID);
  }

  /** Returns true if field i64_ is set (has been assigned a value) and false otherwise */
  public boolean isSetI64_() {
    return EncodingUtils.testBit(__isset_bitfield, __I64__ISSET_ID);
  }

  public void setI64_IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __I64__ISSET_ID, value);
  }

  public double getDouble_() {
    return this.double_;
  }

  public Test setDouble_(double double_) {
    this.double_ = double_;
    setDouble_IsSet(true);
    return this;
  }

  public void unsetDouble_() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DOUBLE__ISSET_ID);
  }

  /** Returns true if field double_ is set (has been assigned a value) and false otherwise */
  public boolean isSetDouble_() {
    return EncodingUtils.testBit(__isset_bitfield, __DOUBLE__ISSET_ID);
  }

  public void setDouble_IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DOUBLE__ISSET_ID, value);
  }

  public String getString_() {
    return this.string_;
  }

  public Test setString_(String string_) {
    this.string_ = string_;
    return this;
  }

  public void unsetString_() {
    this.string_ = null;
  }

  /** Returns true if field string_ is set (has been assigned a value) and false otherwise */
  public boolean isSetString_() {
    return this.string_ != null;
  }

  public void setString_IsSet(boolean value) {
    if (!value) {
      this.string_ = null;
    }
  }

  public byte[] getBinary_() {
    setBinary_(org.apache.thrift.TBaseHelper.rightSize(binary_));
    return binary_ == null ? null : binary_.array();
  }

  public ByteBuffer bufferForBinary_() {
    return org.apache.thrift.TBaseHelper.copyBinary(binary_);
  }

  public Test setBinary_(byte[] binary_) {
    this.binary_ = binary_ == null ? (ByteBuffer)null : ByteBuffer.wrap(Arrays.copyOf(binary_, binary_.length));
    return this;
  }

  public Test setBinary_(ByteBuffer binary_) {
    this.binary_ = org.apache.thrift.TBaseHelper.copyBinary(binary_);
    return this;
  }

  public void unsetBinary_() {
    this.binary_ = null;
  }

  /** Returns true if field binary_ is set (has been assigned a value) and false otherwise */
  public boolean isSetBinary_() {
    return this.binary_ != null;
  }

  public void setBinary_IsSet(boolean value) {
    if (!value) {
      this.binary_ = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BOOL_:
      if (value == null) {
        unsetBool_();
      } else {
        setBool_((Boolean)value);
      }
      break;

    case BYTE_:
      if (value == null) {
        unsetByte_();
      } else {
        setByte_((Byte)value);
      }
      break;

    case I16_:
      if (value == null) {
        unsetI16_();
      } else {
        setI16_((Short)value);
      }
      break;

    case I32_:
      if (value == null) {
        unsetI32_();
      } else {
        setI32_((Integer)value);
      }
      break;

    case I64_:
      if (value == null) {
        unsetI64_();
      } else {
        setI64_((Long)value);
      }
      break;

    case DOUBLE_:
      if (value == null) {
        unsetDouble_();
      } else {
        setDouble_((Double)value);
      }
      break;

    case STRING_:
      if (value == null) {
        unsetString_();
      } else {
        setString_((String)value);
      }
      break;

    case BINARY_:
      if (value == null) {
        unsetBinary_();
      } else {
        setBinary_((ByteBuffer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BOOL_:
      return isBool_();

    case BYTE_:
      return getByte_();

    case I16_:
      return getI16_();

    case I32_:
      return getI32_();

    case I64_:
      return getI64_();

    case DOUBLE_:
      return getDouble_();

    case STRING_:
      return getString_();

    case BINARY_:
      return getBinary_();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BOOL_:
      return isSetBool_();
    case BYTE_:
      return isSetByte_();
    case I16_:
      return isSetI16_();
    case I32_:
      return isSetI32_();
    case I64_:
      return isSetI64_();
    case DOUBLE_:
      return isSetDouble_();
    case STRING_:
      return isSetString_();
    case BINARY_:
      return isSetBinary_();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Test)
      return this.equals((Test)that);
    return false;
  }

  public boolean equals(Test that) {
    if (that == null)
      return false;

    boolean this_present_bool_ = true;
    boolean that_present_bool_ = true;
    if (this_present_bool_ || that_present_bool_) {
      if (!(this_present_bool_ && that_present_bool_))
        return false;
      if (this.bool_ != that.bool_)
        return false;
    }

    boolean this_present_byte_ = true && this.isSetByte_();
    boolean that_present_byte_ = true && that.isSetByte_();
    if (this_present_byte_ || that_present_byte_) {
      if (!(this_present_byte_ && that_present_byte_))
        return false;
      if (this.byte_ != that.byte_)
        return false;
    }

    boolean this_present_i16_ = true;
    boolean that_present_i16_ = true;
    if (this_present_i16_ || that_present_i16_) {
      if (!(this_present_i16_ && that_present_i16_))
        return false;
      if (this.i16_ != that.i16_)
        return false;
    }

    boolean this_present_i32_ = true;
    boolean that_present_i32_ = true;
    if (this_present_i32_ || that_present_i32_) {
      if (!(this_present_i32_ && that_present_i32_))
        return false;
      if (this.i32_ != that.i32_)
        return false;
    }

    boolean this_present_i64_ = true;
    boolean that_present_i64_ = true;
    if (this_present_i64_ || that_present_i64_) {
      if (!(this_present_i64_ && that_present_i64_))
        return false;
      if (this.i64_ != that.i64_)
        return false;
    }

    boolean this_present_double_ = true;
    boolean that_present_double_ = true;
    if (this_present_double_ || that_present_double_) {
      if (!(this_present_double_ && that_present_double_))
        return false;
      if (this.double_ != that.double_)
        return false;
    }

    boolean this_present_string_ = true && this.isSetString_();
    boolean that_present_string_ = true && that.isSetString_();
    if (this_present_string_ || that_present_string_) {
      if (!(this_present_string_ && that_present_string_))
        return false;
      if (!this.string_.equals(that.string_))
        return false;
    }

    boolean this_present_binary_ = true && this.isSetBinary_();
    boolean that_present_binary_ = true && that.isSetBinary_();
    if (this_present_binary_ || that_present_binary_) {
      if (!(this_present_binary_ && that_present_binary_))
        return false;
      if (!this.binary_.equals(that.binary_))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_bool_ = true;
    list.add(present_bool_);
    if (present_bool_)
      list.add(bool_);

    boolean present_byte_ = true && (isSetByte_());
    list.add(present_byte_);
    if (present_byte_)
      list.add(byte_);

    boolean present_i16_ = true;
    list.add(present_i16_);
    if (present_i16_)
      list.add(i16_);

    boolean present_i32_ = true;
    list.add(present_i32_);
    if (present_i32_)
      list.add(i32_);

    boolean present_i64_ = true;
    list.add(present_i64_);
    if (present_i64_)
      list.add(i64_);

    boolean present_double_ = true;
    list.add(present_double_);
    if (present_double_)
      list.add(double_);

    boolean present_string_ = true && (isSetString_());
    list.add(present_string_);
    if (present_string_)
      list.add(string_);

    boolean present_binary_ = true && (isSetBinary_());
    list.add(present_binary_);
    if (present_binary_)
      list.add(binary_);

    return list.hashCode();
  }

  @Override
  public int compareTo(Test other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBool_()).compareTo(other.isSetBool_());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBool_()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bool_, other.bool_);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetByte_()).compareTo(other.isSetByte_());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetByte_()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.byte_, other.byte_);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI16_()).compareTo(other.isSetI16_());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI16_()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i16_, other.i16_);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI32_()).compareTo(other.isSetI32_());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI32_()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i32_, other.i32_);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetI64_()).compareTo(other.isSetI64_());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetI64_()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.i64_, other.i64_);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDouble_()).compareTo(other.isSetDouble_());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDouble_()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.double_, other.double_);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetString_()).compareTo(other.isSetString_());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetString_()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.string_, other.string_);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBinary_()).compareTo(other.isSetBinary_());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBinary_()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binary_, other.binary_);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Test(");
    boolean first = true;

    sb.append("bool_:");
    sb.append(this.bool_);
    first = false;
    if (isSetByte_()) {
      if (!first) sb.append(", ");
      sb.append("byte_:");
      sb.append(this.byte_);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("i16_:");
    sb.append(this.i16_);
    first = false;
    if (!first) sb.append(", ");
    sb.append("i32_:");
    sb.append(this.i32_);
    first = false;
    if (!first) sb.append(", ");
    sb.append("i64_:");
    sb.append(this.i64_);
    first = false;
    if (!first) sb.append(", ");
    sb.append("double_:");
    sb.append(this.double_);
    first = false;
    if (!first) sb.append(", ");
    sb.append("string_:");
    if (this.string_ == null) {
      sb.append("null");
    } else {
      sb.append(this.string_);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("binary_:");
    if (this.binary_ == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.binary_, sb);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'bool_' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TestStandardSchemeFactory implements SchemeFactory {
    public TestStandardScheme getScheme() {
      return new TestStandardScheme();
    }
  }

  private static class TestStandardScheme extends StandardScheme<Test> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Test struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BOOL_
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.bool_ = iprot.readBool();
              struct.setBool_IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BYTE_
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.byte_ = iprot.readByte();
              struct.setByte_IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // I16_
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.i16_ = iprot.readI16();
              struct.setI16_IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // I32_
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.i32_ = iprot.readI32();
              struct.setI32_IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // I64_
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.i64_ = iprot.readI64();
              struct.setI64_IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DOUBLE_
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.double_ = iprot.readDouble();
              struct.setDouble_IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STRING_
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.string_ = iprot.readString();
              struct.setString_IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BINARY_
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.binary_ = iprot.readBinary();
              struct.setBinary_IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetBool_()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'bool_' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Test struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(BOOL__FIELD_DESC);
      oprot.writeBool(struct.bool_);
      oprot.writeFieldEnd();
      if (struct.isSetByte_()) {
        oprot.writeFieldBegin(BYTE__FIELD_DESC);
        oprot.writeByte(struct.byte_);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(I16__FIELD_DESC);
      oprot.writeI16(struct.i16_);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(I32__FIELD_DESC);
      oprot.writeI32(struct.i32_);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(I64__FIELD_DESC);
      oprot.writeI64(struct.i64_);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DOUBLE__FIELD_DESC);
      oprot.writeDouble(struct.double_);
      oprot.writeFieldEnd();
      if (struct.string_ != null) {
        oprot.writeFieldBegin(STRING__FIELD_DESC);
        oprot.writeString(struct.string_);
        oprot.writeFieldEnd();
      }
      if (struct.binary_ != null) {
        oprot.writeFieldBegin(BINARY__FIELD_DESC);
        oprot.writeBinary(struct.binary_);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TestTupleSchemeFactory implements SchemeFactory {
    public TestTupleScheme getScheme() {
      return new TestTupleScheme();
    }
  }

  private static class TestTupleScheme extends TupleScheme<Test> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Test struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeBool(struct.bool_);
      BitSet optionals = new BitSet();
      if (struct.isSetByte_()) {
        optionals.set(0);
      }
      if (struct.isSetI16_()) {
        optionals.set(1);
      }
      if (struct.isSetI32_()) {
        optionals.set(2);
      }
      if (struct.isSetI64_()) {
        optionals.set(3);
      }
      if (struct.isSetDouble_()) {
        optionals.set(4);
      }
      if (struct.isSetString_()) {
        optionals.set(5);
      }
      if (struct.isSetBinary_()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetByte_()) {
        oprot.writeByte(struct.byte_);
      }
      if (struct.isSetI16_()) {
        oprot.writeI16(struct.i16_);
      }
      if (struct.isSetI32_()) {
        oprot.writeI32(struct.i32_);
      }
      if (struct.isSetI64_()) {
        oprot.writeI64(struct.i64_);
      }
      if (struct.isSetDouble_()) {
        oprot.writeDouble(struct.double_);
      }
      if (struct.isSetString_()) {
        oprot.writeString(struct.string_);
      }
      if (struct.isSetBinary_()) {
        oprot.writeBinary(struct.binary_);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Test struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.bool_ = iprot.readBool();
      struct.setBool_IsSet(true);
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.byte_ = iprot.readByte();
        struct.setByte_IsSet(true);
      }
      if (incoming.get(1)) {
        struct.i16_ = iprot.readI16();
        struct.setI16_IsSet(true);
      }
      if (incoming.get(2)) {
        struct.i32_ = iprot.readI32();
        struct.setI32_IsSet(true);
      }
      if (incoming.get(3)) {
        struct.i64_ = iprot.readI64();
        struct.setI64_IsSet(true);
      }
      if (incoming.get(4)) {
        struct.double_ = iprot.readDouble();
        struct.setDouble_IsSet(true);
      }
      if (incoming.get(5)) {
        struct.string_ = iprot.readString();
        struct.setString_IsSet(true);
      }
      if (incoming.get(6)) {
        struct.binary_ = iprot.readBinary();
        struct.setBinary_IsSet(true);
      }
    }
  }

}

